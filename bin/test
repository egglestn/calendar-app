#!/usr/bin/env ruby

module HoozziTesting
  module_function

  def run_all_with_coverage
    with_coverage do
      HoozziTesting.run_rubocop
      HoozziTesting.run_rails_best_practices
      HoozziTesting.run_brakeman
      HoozziTesting.run_rspec
      HoozziTesting.run_cucumber
    end
  end

  def run_rubocop
    require "rubocop"
    require "benchmark"
    cli = RuboCop::CLI.new
    result = 0
    time = Benchmark.realtime do
      result = cli.run
    end
    puts "Finished rubocop in #{time} seconds" if cli.options[:debug]
    SimpleCov.command_name "rubocop" unless result == 0
    exit result unless result == 0
  end

  def run_rails_best_practices
    require "rails_best_practices"
    require "benchmark"
    result = 0
    time = Benchmark.realtime do
      analyzer = RailsBestPractices::Analyzer.new('.')
      analyzer.analyze
      analyzer.output
      result = analyzer.runner.errors.size
    end
    puts "Finished best practices in #{time} seconds"
    SimpleCov.command_name "rails_best_practices" unless result == 0
    exit result unless result == 0
  end

  def run_brakeman
    require "brakeman"
    require "benchmark"
    tracker = 0
    time = Benchmark.realtime do
      tracker = Brakeman.run app_path: '.', skip_files: ['lib/ownable_by.rb'], exit_on_warn: true
    end
    puts "Finished brakeman in #{time} seconds"

    warnings = tracker.warnings
    if warnings.size > 0
       puts "Offenses:"
       puts ""
       puts warnings
       puts ""
       puts warnings.size.to_s + " possible security exposure(s) detected"
       SimpleCov.command_name "brakeman"
       exit warnings.size
    end
  end

  def run_rspec
    require "rspec/core"
    $LOAD_PATH.unshift("spec")
    require "rails_helper"
    Dir.glob("spec/**/*_spec.rb").each { |f| require_relative(File.join("..", f)) }
    RSpec::Core::Runner.invoke
  end

  def run_cucumber
    require "cucumber"
    args = Dir.glob("features/**/*.feature")
    # args += %w(-d -f Cucumber::Formatter::Custom)
    Cucumber::Cli::Main.new(args).execute!

  rescue SystemExit => e
    # Cucumber calls @kernel.exit(), killing your script unless you rescue
    exit e.status unless e.status == 0
  end

  def with_coverage(&block)

    require "codeclimate-test-reporter"
    require "simplecov"
    require "webmock"
    CodeClimate::TestReporter.start

    at_exit do
      WebMock.allow_net_connect!
    end

    SimpleCov.start "rails" do
    end

    block && block.call
  end
end

test_type = ARGV.shift

case test_type
when "rubocop"
  HoozziTesting.run_rubocop
when "rails_best_practices"
  HoozziTesting.run_rails_best_practices
when "brakeman"
  HoozziTesting.run_brakeman
when "rspec"
  HoozziTesting.run_rspec
when "cucumber"
  HoozziTesting.run_cucumber
else
  HoozziTesting.run_all_with_coverage
end

